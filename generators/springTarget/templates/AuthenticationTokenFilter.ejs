package <%= groupName %>.<%= artifactName %>.<%= artifactName %>.security;

import <%= groupName %>.<%= artifactName %>.<%= artifactName %>.security.jwt.JwtUser;
import <%= groupName %>.<%= artifactName %>.<%= artifactName %>.security.jwt.JwtValidator;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;

/**
 * @author omar Jan 21, 2019
 */
public class AuthenticationTokenFilter extends AbstractAuthenticationProcessingFilter {

	public AuthenticationTokenFilter(String defaultProcessUrl) {
		super(new AntPathRequestMatcher(defaultProcessUrl));
	}

	private OAuth2RestOperations restTemplate;

	public void setRestTemplate(OAuth2RestOperations restTemplate) {
		this.restTemplate = restTemplate;
	}

	public OAuth2RestOperations getRestTemplate() {
		return restTemplate;
	}

	@Override
	public Authentication attemptAuthentication(HttpServletRequest httpServletRequest,
                                                HttpServletResponse httpServletResponse) throws AuthenticationException {
		String token;

		try {
			token = restTemplate.getAccessToken().getValue();
		}
		catch (Exception e) {
			throw new BadCredentialsException("Could not obtain access token", e);
		}
		JwtUser jwtUser = JwtValidator.validate(token);

		return new UsernamePasswordAuthenticationToken(jwtUser, null, new ArrayList<>());
	}

	@Override
	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
                                            Authentication authResult) throws IOException, ServletException {
		super.successfulAuthentication(request, response, chain, authResult);

		/*
		 * process to request
		 */
		chain.doFilter(request, response);
	}

}