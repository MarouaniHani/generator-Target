/**
 * 
 */
package com.<%= groupName %>.<%= artifactName %>.config;


import com.<%= groupName %>.<%= artifactName %>.security.AuthenticationTokenFilter;
import com.<%= groupName %>.<%= artifactName %>.security.DelegateRequestMatchingFilter;
import com.<%= groupName %>.<%= artifactName %>.security.SuccessHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.OrRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.security.Principal;

/**
 * @author omar Jan 21, 2019
 */
@EnableResourceServer
@RestController
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)

public class ResourceServerConfig extends ResourceServerConfigurerAdapter {
	@Autowired
	private OAuth2RestTemplate oauthRestTemplate;

	@RequestMapping("/user")
	public Authentication userInfo(Authentication user, Principal p) {
		return user;
	}


	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
		resources.resourceId(null);
	}

	@Bean
	public DelegateRequestMatchingFilter jwtAuthenticationTokenFilter() {
		AuthenticationTokenFilter tokenFilter = new AuthenticationTokenFilter("/**");
		tokenFilter.setAuthenticationSuccessHandler(new SuccessHandler());
		tokenFilter.setRestTemplate(oauthRestTemplate);
		return new DelegateRequestMatchingFilter(IGNORED_MATCHER, tokenFilter);

	}

	static final RequestMatcher LOGIN_MATCHER = new AntPathRequestMatcher("/auth/**", "POST");

	static final RequestMatcher OPTIONS_MATCHER = new AntPathRequestMatcher("/**", "OPTIONS");

	static final RequestMatcher SWAGGER = new AntPathRequestMatcher("/swagger-ui.html/**");

	static final RequestMatcher SWAGGER_SITE = new AntPathRequestMatcher("/webjars/**");

	static final RequestMatcher SWAGGER_RESOURCES = new AntPathRequestMatcher("/swagger-resources/**");

	static final RequestMatcher SWAGGER_API = new AntPathRequestMatcher("/v2/api-docs");

	static final RequestMatcher CONFIGURATION = new AntPathRequestMatcher("/configuration/**");

	static final RequestMatcher HEALTH = new AntPathRequestMatcher("/actuator/**");

	static final RequestMatcher FAV = new AntPathRequestMatcher("/favicon.ico");

	static final RequestMatcher IGNORED_MATCHER = new OrRequestMatcher(OPTIONS_MATCHER, LOGIN_MATCHER, SWAGGER,
			SWAGGER_RESOURCES, FAV, SWAGGER_SITE, SWAGGER_API, CONFIGURATION, HEALTH);

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.csrf().disable().authorizeRequests().requestMatchers(IGNORED_MATCHER).permitAll().anyRequest()
				.authenticated().and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

	}

}
